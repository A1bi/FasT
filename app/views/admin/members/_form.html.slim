- title "#{title} – Mitgliederverwaltung"

.container
  h1 Mitgliederverwaltung
  h2 = title
  .row: .col: .card
    = form_for [:admin, @member] do |f|
      = render 'errors', errors: @member.errors
      = render 'errors', errors: @member.sepa_mandate.errors
      = hidden_field_tag :membership_application_id, @membership_application.id if @membership_application.present?
      .mb-2
        = f.label :first_name, 'Vorname'
        = f.text_field :first_name, required: true
      .mb-2
        = f.label :last_name, 'Nachname'
        = f.text_field :last_name, required: true
      .mb-2
        = f.label :title, 'Titel'
        = f.text_field :title
        .form-text Zum Beispiel <em>Dr. med.</em>
      .mb-2
        = f.label :nickname, 'Vorname in Anrede'
        = f.text_field :nickname
        .form-text Zum Beispiel Uli statt Ulrich. Ansonsten freilassen.
      .mb-2
        = f.label :gender, 'Geschlecht'
        = f.select :gender, Members::Member.genders.map { |g| [t("genders.#{g}"), g] }
      .mb-2
        = f.label :birthday, 'Geburtstag'
        = f.date_field :birthday

      h3 Adresse
      .mb-2
        = f.label :street, 'Straße und Hausnummer'
        = f.text_field :street
      .row.mb-2
        .col-5
          = f.label :plz, 'PLZ'
          = f.number_field :plz, limit: 5
        .col-7
          = f.label :city, 'Stadt'
          = f.text_field :city

      h3 Kontaktdaten
      .mb-2
        = f.label :email, 'E-Mail-Adresse'
        = f.email_field :email
        .form-text Diese Adresse wird für den Versand von E-Mails wie der Begrüßungs-E-Mail sowie für den Login in den Mitgliederbereich verwendet. Sollte keine eigene E-Mail-Adresse vorhanden sein, werden E-Mails stattdessen an ein eventuell verknüpftes Familienmitglied verschickt.
      .mb-2
        = f.label :phone, 'Telefonnummer'
        = f.text_field :phone

      h3 Bankverbindung
      = f.fields_for @member.sepa_mandate do |ff|
        .mb-2
          = f.label :sepa_mandate_id, 'SEPA-Mandat'
          = f.select :sepa_mandate_id
            option neues Mandat anlegen
            - @sepa_mandates.each do |category, mandates|
              optgroup label=t(".sepa_mandates.#{category}")
                - if mandates.any?
                  = options_from_collection_for_select(mandates, :id, ->(m) { "#{m.number(prefixed: true)}: #{obfuscated_mandate_iban(m)}" }, selected: ->(m) { category == :all && m.id == @member.sepa_mandate_id })
        .mb-2
          = ff.label :debtor_name, 'Kontoinhaber'
          = ff.text_field :debtor_name
        .mb-2
          = ff.label :iban, 'IBAN'
          = ff.text_field :iban, value: obfuscated_mandate_iban(@member.sepa_mandate)
        - if @member.sepa_mandate&.persisted?
          .mb-2
            = ff.label :issued_on, 'Mandatsdatum'
            .d-block = l @member.sepa_mandate.issued_on
        .mb-2
          = ff.label :membership_fee, 'Jahresbeitrag'
          | #{f.number_field :membership_fee, step: 0.01, placeholder: Settings.members.default_membership_fee} Euro
        .mb-2
          small.d-block Änderungen an diesem Mandat werden automatisch auch für andere Mitglieder übernommen, die ebenfalls das Mandat mit dieser Nummer nutzen.

      h3 Weitere Angaben
      - unless @member.in_family?
        .mb-2
          = f.label :family_member_id, 'Familie'
          = f.collection_select(:family_member_id, @members, :id, ->(member) { "#{member.last_name}, #{member.first_name}" }, include_blank: true)
          .form-text Wählen Sie ein Familienmitglied, dessen Familie dieses Mitglied zugeordnet werden soll.
      .mb-2
        = f.label :joined_at, 'Beitrittsdatum'
        = f.date_field :joined_at
      .mb-2
        = f.label :group, 'Gruppe'
        = f.select(:group, options_for_select(@groups, @member.group))

      - if @member.persisted? && policy(@member).update_permissions?
        h3 Berechtigungen
        - User::PERMISSIONS.each do |permission|
          .form-check
            = f.check_box :permissions, { multiple: true, checked: @member.permitted?(permission) }, permission, nil
            = f.label :permissions, t("permissions.#{permission}"), value: permission
        - shared_email_accounts.each do |email|
          .form-check
            = f.check_box :shared_email_accounts_authorized_for, { multiple: true, checked: @member.authorized_for_shared_email_account?(email) }, email, nil
            = f.label :shared_email_accounts_authorized_for, t('permissions.authorized_for_shared_email_account_html', email: email), value: email

      .text-center.mt-2 = cond_submit f

      - if @member.persisted?
        h3 Familie
        - if @member.in_family?
          ul
            - @member.family.members.alphabetically.each do |member|
              li = link_to member.name.full, admin_members_member_path(member)
            small.d-block = link_to 'Dieses Mitglied aus der Familie entfernen.', admin_members_member_path(@member, members_member: { family_id: nil }), method: :patch, data: { confirm: 'Möchten Sie das Mitglied wirklich aus der Familie entfernen?'}
        - else
          em Dieses Mitglied ist keiner Familie zugeordnet.
