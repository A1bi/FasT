- title "#{@member.name.full} – Mitgliederverwaltung"

.container
  h1 = @member.name.full
  .row: .col
    small.d-block.text-center
      - if policy(@member).destroy?
        => link_to 'löschen', admin_members_member_path(@member), method: :delete, data: { confirm: 'Möchten Sie dieses Mitglied wirklich löschen?'}
        ' |
      - if policy(@member).edit? && !@member.membership_cancelled?
        => link_to 'Kündigung vormerken', admin_members_member_path(@member, members_member: { cancelled: true }), method: :patch, data: { confirm: 'Möchten Sie eine Kündigung wirklich vormerken?'}
        ' |
      - if policy(@member).reactivate? && @member.email.present?
        => link_to 'reaktivieren', reactivate_admin_members_member_path, method: :patch, title: 'Passwort zurücksetzen und Aktivierungs-E-Mail erneut zusenden', data: { confirm: 'Möchten Sie diesem Mitglied wirklich eine neue Aktivierungs-E-Mail zusenden?' }
        ' |
      - if policy(@member).edit?
        = link_to 'Daten bearbeiten', edit_admin_members_member_path(@member)

  .row: .col
    - if @member.membership_cancelled?
      = render 'alert', type: 'warning'
        | Mitgliedschaft gekündigt zum #{l(@member.membership_terminates_on, format: :long)}.
        .mt-1 = link_to 'Kündigung zurücknehmen', admin_members_member_path(@member, members_member: { cancelled: false }), method: :patch, data: { confirm: 'Möchten Sie die Kündigung wirklich zurücknehmen?'}, class: 'btn btn-sm'

    - if (last_payment = @member.membership_fee_payments.last)&.failed?
        = render 'alert', type: 'alert'
          | Letzte Zahlung fehlgeschlagen.
          - if @member.membership_fee_payments_paused && policy(@member).resume_membership_fee_payments?
            .mt-1 = link_to 'automatischen Bankeinzug fortsetzen', resume_membership_fee_payments_admin_members_member_path(@member), method: :patch, data: { confirm: 'Möchten Sie den automatischen Bankeinzug fortsetzen?' }, class: 'btn btn-sm'

    .card
      dl.md-horizontal
        dt Mitgliedsnummer
        dd = @member.number
        - if @member.membership_application.present?
          dt Antragsnummer
          dd = link_to @member.membership_application.id, [:admin, @member.membership_application]
        dt Name
        dd
          = @member.name.full
          - if @member.nickname != @member.first_name
            em<() (#{@member.nickname})
        dt Geburtstag
        dd
          - if @member.birthday
            = l @member.birthday, format: :long
        dt Geschlecht
        dd = t("genders.#{@member.gender}")

        h3.w-100 Kontaktdaten
        dt Adresse
        dd
          = @member.street
          br
          | #{@member.plz} #{@member.city}
        dt E-Mail-Adresse
        dd = mail_to @member.email
        dt Telefonnummer
        dd = @member.phone

        h3.w-100 Bankverbindung
        - if @member.sepa_mandate.present?
          dt Kontoinhaber
          dd = @member.sepa_mandate.debtor_name
          dt IBAN
          dd: tt = obfuscated_mandate_iban(@member.sepa_mandate)
          dt Mandat
          dd
            tt> = @member.sepa_mandate.number(prefixed: true)
            small.d-block() (vom #{l(@member.sepa_mandate.issued_on)})

        h3.w-100 Mitgliedsbeitrag
        dt Jahresbeitrag
        dd = number_to_currency(@member.membership_fee)
        dt zuletzt bezahlt
        dd
          - if (last_payment = @member.membership_fee_payments.last).present?
            = link_to_if policy(last_payment.debit_submission).show?, l(last_payment.created_at.to_date, format: :long), [:admin, last_payment.debit_submission]
            - if last_payment.failed?
              em.text-red<() (fehlgeschlagen)
            - elsif policy(last_payment).mark_as_failed?
              .mt-1 = link_to 'Zahlung als fehlgeschlagen markieren', mark_as_failed_admin_members_membership_fee_payment_path(last_payment), method: :patch, data: { confirm: 'Möchten Sie die Zahlung als fehlgeschlagen markieren?' }, class: 'btn btn-sm'
          - else
            em = t('admin.members.membership_fee_never_paid')
        - if @member.membership_fee_paid_until.present?
          dt bezahlt bis
          dd = l @member.membership_fee_paid_until, format: :long

        h3.w-100 Weitere Angaben
        dt Beitrittsdatum
        dd = l @member.joined_at, format: :long
        dt Im Vorstand
        dd = @member.admin? ? 'Ja' : 'Nein'
        dt Letzter Login
        dd = last_login_time @member
        dt Familie
        dd
          - if @member.in_family?
            ul
              - @member.family.members.alphabetically.each do |member|
                li = link_to member.name.full, admin_members_member_path(member)
            small.d-block = link_to 'Dieses Mitglied aus der Familie entfernen.', admin_members_member_path(@member, members_member: { family_id: nil }), method: :patch, data: { confirm: 'Möchten Sie das Mitglied wirklich aus der Familie entfernen?'}
          - else
            em Dieses Mitglied ist keiner Familie zugeordnet.

      - if policy(@member).show_permissions?
        h3 Berechtigungen
        - if @member.permissions&.any? || @member.shared_email_accounts_authorized_for&.any?
          ul
            - @member.permissions&.each do |permission|
              li = t "permissions.#{permission}"
            - @member.shared_email_accounts_authorized_for&.each do |email|
              li = t('permissions.authorized_for_shared_email_account_html', email: email)
        - else
          em Dieses Mitglied hat keine besonderen Berechtigungen.
