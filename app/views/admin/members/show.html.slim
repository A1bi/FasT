- include_css 'members/main'
- title "Mitgliederverwaltung – #{@member.name.full}"

.hl Mitgliederverwaltung
.box
  .top = @member.name.full
  .con
    .small.hright
      - if policy(@member).destroy?
        => link_to 'löschen', admin_members_member_path(@member), method: :delete, data: { confirm: 'Möchten Sie dieses Mitglied wirklich löschen?'}
        ' |
      - if policy(@member).edit? && !@member.membership_cancelled?
        => link_to 'Kündigung vormerken', admin_members_member_path(@member, members_member: { cancelled: true }), method: :patch, data: { confirm: 'Möchten Sie eine Kündigung wirklich vormerken?'}
        ' |
      - if policy(@member).reactivate? && @member.email.present?
        => link_to 'reaktivieren', reactivate_admin_members_member_path, method: :patch, title: 'Passwort zurücksetzen und Aktivierungs-E-Mail erneut zusenden', data: { confirm: 'Möchten Sie diesem Mitglied wirklich eine neue Aktivierungs-E-Mail zusenden?' }
        ' |
      - if policy(@member).edit?
        = link_to 'Daten bearbeiten', edit_admin_members_member_path(@member)

    table
      tr
        td width='40%' Mitgliedsnummer:
        td.monospace = @member.number
      tr
        td Name:
        td
          = @member.name.full
          - if @member.nickname != @member.first_name
            em<() (#{@member.nickname})
      tr
        td Geburtstag:
        td
          - if @member.birthday
            = l @member.birthday, format: :long
      tr
        td Geschlecht:
        td = t("genders.#{@member.gender}")
      - if @member.membership_cancelled?
        tr
          td colspan=2
            .cancelled Mitgliedschaft gekündigt zum #{l(@member.membership_terminates_on, format: :long)}
            .small.hcen = link_to 'Kündigung zurücknehmen', admin_members_member_path(@member, members_member: { cancelled: false }), method: :patch, data: { confirm: 'Möchten Sie die Kündigung wirklich zurücknehmen?'}

      tr: td(colspan=2): h3 Kontaktdaten
      tr
        td Adresse:
        td
          = @member.street
          br
          | #{@member.plz} #{@member.city}
      tr
        td E-Mail-Adresse:
        td = mail_to @member.email
      tr
        td Telefonnummer:
        td = @member.phone

      tr: td(colspan=2): h3 Bankverbindung
      - if @member.sepa_mandate.present?
        tr
          td Kontoinhaber:
          td = @member.sepa_mandate.debtor_name
        tr
          td IBAN:
          td.monospace = obfuscated_mandate_iban(@member.sepa_mandate)
        tr
          td Mandat:
          td
            span.monospace> = @member.sepa_mandate.number(prefixed: true)
            | (vom #{l(@member.sepa_mandate.issued_on)})

      tr: td(colspan=2): h3 Mitgliedsbeitrag
      tr
        td Jahresbeitrag:
        td = number_to_currency(@member.membership_fee)
      tr
        td zuletzt bezahlt:
        td
          - if (last_payment = @member.membership_fee_payments.last).present?
            = l last_payment.created_at.to_date, format: :long
            - if last_payment.failed?
              .small.failed Zahlung fehlgeschlagen
            - elsif policy(last_payment).mark_as_failed?
              .small = link_to 'Zahlung als fehlgeschlagen markieren', mark_as_failed_admin_members_membership_fee_payment_path(last_payment), method: :patch, data: { confirm: 'Möchten Sie die Zahlung als fehlgeschlagen markieren?' }
            - if @member.membership_fee_payments_paused && policy(@member).resume_membership_fee_payments?
              .small = link_to 'automatischen Bankeinzug fortsetzen', resume_membership_fee_payments_admin_members_member_path(@member), method: :patch, data: { confirm: 'Möchten Sie den automatischen Bankeinzug fortsetzen?' }
          - else
            em = t('admin.members.membership_fee_never_paid')
      - if @member.membership_fee_paid_until.present?
        tr
          td bezahlt bis:
          td = l @member.membership_fee_paid_until, format: :long

      tr: td(colspan=2): h3 Weitere Angaben
      tr
        td Beitrittsdatum:
        td = l @member.joined_at, format: :long
      tr
        td Im Vorstand:
        td = @member.admin? ? 'Ja' : 'Nein'
      tr
        td Letzter Login
        td = last_login_time @member
      tr
        td Familie
        td
          - if @member.in_family?
            ul
              - @member.family.members.alphabetically.each do |member|
                li = link_to member.name.full, admin_members_member_path(member)
              p.small = link_to 'Dieses Mitglied aus der Familie entfernen.', admin_members_member_path(@member, members_member: { family_id: nil }), method: :patch, data: { confirm: 'Möchten Sie das Mitglied wirklich aus der Familie entfernen?'}
          - else
            em Dieses Mitglied ist keiner Familie zugeordnet.

    - if policy(@member).show_permissions?
      h3 Berechtigungen
      - if @member.permissions&.any? || @member.shared_email_accounts_authorized_for&.any?
        ul
          - @member.permissions&.each do |permission|
            li = t "permissions.#{permission}"
          - @member.shared_email_accounts_authorized_for&.each do |email|
            li = t('permissions.authorized_for_shared_email_account_html', email: email)
      - else
        em Dieses Mitglied hat keine besonderen Berechtigungen.
