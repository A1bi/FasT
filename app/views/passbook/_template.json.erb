<%=
date = ticket.date.date.to_formatted_s(:w3c)

barcode = {
  format: 'PKBarcodeFormatQR',
  message: ticket.signed_info(medium: Ticketing::CheckIn.media[:passbook]),
  messageEncoding: 'utf-8',
  altText: ticket.number
}

_info = {
  formatVersion: 1,
  description: "Ticket für das Theaterstück „#{ticket.date.event.name}“",
  organizationName: "Freilichtbühne am schiefen Turm",
  passTypeIdentifier: @type_id,
  groupingIdentifier: ticket.order.number.to_s,
  voided: ticket.cancelled?,
  teamIdentifier: "V48L6BF6M3",
  webServiceURL: api_passbook_root_url,
  relevantDate: date,
  barcode: barcode,
  barcodes: [barcode],
  locations: [
    {
      latitude: 50.23089,
      longitude: 7.141626
    }
  ],
  eventTicket: {
    primaryFields: [
      {
        key: "date",
        label: "Beginn",
        value: date,
        dateStyle: "PKDateStyleFull",
        timeStyle: "PKDateStyleShort",
        changeMessage: "Ihr Ticket wurde auf folgendes Datum umgebucht: %@"
      }
    ],
    secondaryFields: [],
    auxiliaryFields: [
      {
        key: "location",
        label: "Veranstaltungsort",
        value: ticket.date.event.location,
        changeMessage: "Der Veranstaltungsort wurde verlegt nach „%@“."
      },
      {
        key: "opens",
        label: "Einlass",
        value: ticket.date.door_time.to_formatted_s(:w3c),
        timeStyle: "PKDateStyleShort"
      },
      {
        key: "ticket_type",
        label: "Kategorie",
        value: ticket.type.name,
        changeMessage: "Die Kategorie Ihres Tickets wurde geändert auf „%@“."
      },
    ],
    backFields: [
      {
        key: "overviewUrl",
        label: "Ticket umbuchen oder stornieren",
        value: "Auf unserer <a href=\"#{order_overview_url(ticket.order.signed_info(authenticated: true))}\">Website</a> haben Sie die Möglichkeit, Ihre Tickets umzubuchen oder zu stornieren."
      },
      {
        key: "hotline",
        label: "Hotline",
        value: "+49 2653 282709"
      },
      {
        key: "order",
        label: "Ticketnummer",
        value: ticket.number
      }
    ]
  },
  backgroundColor: "rgb(255, 255, 255)",
  foregroundColor: "rgb(0, 0, 0)",
  labelColor: "rgb(0, 0, 0)"
}

if ticket.date.event.seating.bound_to_seats?
  _info[:eventTicket][:secondaryFields] << {
    key: "entrance",
    label: "Eingang",
    value: ticket.block.entrance,
    textAlignment: "PKTextAlignmentLeft",
    changeMessage: "Der aktualisierte Eingang zu Ihrem Sitzplatz lautet %@."
  } if ticket.block.entrance.present?

  _info[:eventTicket][:secondaryFields] << {
    key: "block",
    label: "Block",
    value: ticket.block.name,
    changeMessage: "Ihr Sitzplatz befindet sich nun in Block %@."
  } if ticket.block.name.present?

  _info[:eventTicket][:secondaryFields] << {
    key: "row",
    label: "Reihe",
    value: ticket.seat.row,
    changeMessage: "Ihr Sitzplatz befindet sich nun in Reihe %@."
  } if ticket.seat.row.present?

  _info[:eventTicket][:secondaryFields] << {
    key: "seat",
    label: "Sitzplatz",
    value: ticket.seat.number,
    textAlignment: "PKTextAlignmentLeft",
    changeMessage: "Ihre neue Sitznummer lautet %@."
  }

else
  _info[:eventTicket][:secondaryFields] << {
    key: "seat",
    label: "Sitzplatz",
    value: "Freie Platzwahl"
  }
end

if info.dig(:eventTicket, :backFields)
  info[:eventTicket][:backFields] += _info[:eventTicket][:backFields]
end

info = _info.deep_merge(info || {})
raw info.to_json
%>
