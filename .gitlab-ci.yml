include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

.default-tags:
  tags: [ruby-2.6]

.postgres:
  tags:
    - ruby-2.6
    - postgres

.bundle: &bundle
  - bundle install -j $(sysctl -n hw.ncpu) --without development

.copy_master_key: &copy_master_key
  - cp $RAILS_CREDENTIALS_MASTER_KEY config/master.key

.production_env: &production_env
  name: production
  url: https://www.theater-kaisersesch.de

stages:
  - test
  - deploy
  - post-deploy

variables:
  RAILS_ENV: test
  NODE_ENV: test

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules

rubocop:
  extends: .default-tags
  except:
    - schedules
  before_script:
    - *bundle
  script:
    - rubocop

standardjs:
  tags:
    - yarn
  except:
    - schedules
  before_script:
    - yarn install --frozen-lockfile
  script:
    - yarn run standard

specs:
  extends: .postgres
  except:
    - schedules
  before_script:
    - *bundle
    - *copy_master_key
  script:
    - rails db:drop db:create db:structure:load
    - rails test

bundler audit:
  extends: .default-tags
  script:
    - gem install bundler-audit
    - bundle audit check --update

yarn audit:
  tags:
    - yarn
  script:
    - yarn audit
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: manual
      allow_failure: true

deploy:
  extends: .default-tags
  except:
    - schedules
  stage: deploy
  before_script:
    - *bundle
  script:
    - ssh_wrap cap production deploy
  environment:
    <<: *production_env
  only:
    refs:
      - production

run one off task:
  extends: .default-tags
  except:
    - schedules
  stage: post-deploy
  before_script:
    - *bundle
  script:
    - ssh_wrap cap production one_off:run
  environment:
    <<: *production_env
  only:
    refs:
      - production
  when: manual
